==== HTT.exe spec memo ====


起動方法

	HTT.exe [/U ユーザーUUID] [/P ポート番号] /S サービス定義ファイル

		ユーザーUUID
			e.g. /U {c62710c7-160b-4fbe-9b43-16f2099dde32}

		ポート番号
			デフォルト 80

		サービス定義ファイル
			絶対パスまたは相対パス
			相対パスの場合、起動時の作業ディレクトリからの相対パスとなる。


実行中のキー操作

	エスケープキー ... 終了方法を参照
	'0'            ... 終了方法を参照
	Rキー          ... ピーク値のリセット


終了方法

	HTT.exe [/U ユーザーUUID] /T を実行するか、エスケープキーまたは '0' キーを押す。

	/T またはエスケープキーを押した場合

		現在の接続を強制的に切断してサーバーを終了する。

	'0' キーを押した場合

		現在の接続が切断されるのを待ってからサーバーを終了する。
		待っている間に /T またはエスケープキーを押せば、強制切断してすぐに終了する。


サービス定義ファイル

	形式       ... テキスト
	文字コード ... CP932
	改行コード ... CR-LF 又は LF

	書式 = 1*(( SERVICE-NAME SP SERVICE-COMMAND | COMMENT ) NEW-LINE ) EOF

		SERVICE-NAME = 1*1000( 0x21 ～ 0x7e )
		SP = 0x20
		SERVICE-COMMAND = 1*( コマンドに使用できる文字 )
		COMMENT = 0x3b *( 改行以外の文字 )
		NEW-LINE = *1( 0x0d ) 0x0a
		EOF = *1( 0x1a )

		各行の SERVICE-NAME と SERVICE-COMMAND をサービス名と対応するサービスコマンドの組み合わせとする。
		サービス名は大文字・小文字を区別しない。
		サービス名が重複してはならない。
		セミコロンで始まる行はコメントと見なす。

	サービスコマンド

		旧仕様 -->

		コマンドインタプリタに SERVICE-COMMAND をそのまま渡して実行する文字列である。
		以下のように呼んでいるだけ、戻り値も見ていない。

			system( SERVICE-COMMAND );

		内部コマンドも使える。
		例えば、受信データをそのまま送信するだけのエコーサービス（エコーサーバー）は

			COPY /B Send.httdat + Recv.httdat 1 & MOVE /Y 1 Send.httdat & TYPE NUL > Recv.httdat

		接続したらすぐに切断するだけのサービスは

			DEL Send.httdat

		という SERVICE-COMMAND で実現できる。

		<-- 旧仕様

		現在の仕様 -->

		SERVICE-COMMAND を "" を考慮してコマンド・引数列に分解して以下のように呼ぶ。戻り値は見ていない。

			_spawnv( _P_WAIT , SERVICE-COMMAND-ARGUMENT-0 , SERVICE-COMMAND-ARGUMENTS );

		内部コマンドは使えなくなった。

		但し、以下の何れかを満たす場合、旧仕様どおり system 関数を呼び出す。

			コマンド・引数に１つでも空白が入っている。(_spawn 系関数の制限による)
			SERVICE-COMMAND が 1024 バイトを超える。(_spawn 系関数の制限による)

		<-- 現在の仕様

		----

		実行時の作業ディレクトリはどこかのテンポラリフォルダ（＝サービスフォルダ）であるため、
		コマンド内のパスは絶対パスで記述する必要がある。

		----

		以下の置換を行う。

			<BASE> ... サービス定義ファイルが存在するディレクトリへの絶対パス

			大文字・小文字を区別しない。
			<BASE> の最後に円記号を入れる。例: C:\, C:\ABC\, C:\ABC\DEF\

			例: サービス定義ファイルが C:\HTT\Service.dat である場合、
			"<Base>bin\Get.exe" <Base>dat\DocRoot.dat というコマンドは "C:\HTT\bin\Get.exe" C:\HTT\dat\DocRoot.dat に変換する。
			<Base> の直後に円記号が不要であることに注意。あっても無害みたいだけど...


接続

	接続毎にテンポラリフォルダ（サービスフォルダ）を作成する。
	切断するまで、同じサービスフォルダからサービスコマンドを実行し続ける。

	サービスフォルダのパス = TEMP-DIR \ APP-UUID \ CRYPTO-RAND

		TEMP-DIR    ... 環境変数 TMP の指すディレクトリ, TMP が未定義の場合は TEMP, TEMP も未定義ならエラーで落ちる。
		APP-UUID    ... {A84D19ED-158C-4F8D-8F63-AAF315C26381} (但し、ユーザーUUIDが指定されていれば、ユーザーUUIDになる)
		CRYPTO-RAND ... ( 0～9, a～z ) の 36 文字を使用した 25 桁の乱数(CSPRNG使用)

		例: C:\Users\user01\AppData\Local\Temp\{A84D19ED-158C-4F8D-8F63-AAF315C26381}\m2awgejwq4w6b81le90mwxiax

	サービスフォルダの直下に以下のファイルを作成する。

		IP.httdat    ... クライアントのＩＰアドレスを記述したファイル（削除不可・変更不可）
		Recv.httdat  ... 受信データファイル（削除不可）
		Send.httdat  ... 送信データファイル
		Tight.httdat ... ステータス：グリーン以外又は現在のＴＣＰ接続数が「暫定最大同時接続数」を超えている場合、作成する。そうでない場合、作成しない。

		サービスコマンドはこれ以外のファイル・フォルダを作成して良い。

	IP.httdat の内容 = NUM DOT NUM DOT NUM DOT NUM NEW-LINE

		NUM = '0' | '1'～'9' *('0'～'9')
		DOT = '.'
		NEW-LINE = 0x0d 0x0a

		NUM は 0～255 の整数

	Tight.httdat の内容 = LEVEL NEW-LINE

		LEVEL = 'L' | 'M' | 'H'
		NEW-LINE = 0x0d 0x0a

		LEVEL の基準は以下のとおり

			           応答の変更                下り無通信タイムアウトの変更
			-----------------------------------------------------------------
			L ... 低   平常どおり                300秒 -> 90秒
			M ... 中   HTMLのみ 503 を応答する   300秒 -> 60秒
			H ... 高   全て 503 を応答する       300秒 -> 30秒

	受信データ処理

		1. 通信ストリームから最大 1,000,000 バイト読み込む。
		2. 読み込んだデータが 1 バイト以上であれば Recv.httdat に追記する。

	送信データ処理

		1. Send.httdat の先頭から最大 1,000,000 バイト読み込む。
		2. 通信ストリームに書き出す。
		3. 書き込めたデータが 1 バイト以上であれば Send.httdat の先頭から「書き出した分だけ」削除する。

		Send.httdat は空になっても削除しない。

	サービスの紐付け

		受信データが ( 1*1000( CHR ) NOCHR ) で始まり、最初の NOCHR の直前までの文字列に一致するサービス名があると、そのサービスに紐付ける。

		CHR = 0x21 ～ 0x7e
		NOCHR = 0x00 ～ 0x20 | 0x7f ～ 0xff

		サービス名は大文字・小文字を区別しない。
		（受信データから）紐付けできないと判断した場合、切断する。
		接続してから６０秒経過してもサービスの紐付けができない場合も、切断する。
		受信データのサービス名の部分は削除せず、そのままサービスコマンドを実行する。

	サービスコマンド

		実行条件 = サービスの紐付けに成功した AND (Recv.httdatの更新 OR Send.httdatの更新 OR 前回のサービスコマンド実行から2～3秒かそれ以上経過した)

		サービスコマンドの作業ディレクトリ = サービスフォルダ
		前回のサービスコマンド実行から Recv.httdat, Send.httdat のサイズの変化は 1,000,000 バイトを越えない。
		Send.httdat を削除すると切断の要求と見なす。

	切断処理

		サービスコマンドが生成したファイル・フォルダを含めサービスフォルダを削除する。


サービスコマンドの定期的な空実行

	だいたい６０秒に１回の頻度で実行する。
	やることは以下のとおり。

	テンポラリフォルダを作成し、以下のファイルを作成する。

		IP.httdat    ... 空ファイル
		Recv.httdat  ... 空ファイル
		Send.httdat  ... 空ファイル
		Tight.httdat ... 空ファイル (無い場合もある)

	全てのサービスのサービスコマンドを実行する。
	空実行の見分け方 = IP.httdat が空であるかどうか。


サービスコマンドの実装

	保障されること

		IP.httdat, Recv.httdat, Send.httdat が存在する。
		これ以外のファイル・フォルダを作成して良い。
			拡張子 httdat のファイルは除く。（これらのファイルを作成・変更・削除することは意味がある場合がある）
			作成したファイル・フォルダは切断までに削除する必要は無い。
		切断まで、同じ作業ディレクトリであること。
		サービスコマンドの実行中は、同じ又は他のサービスコマンドを実行しない。（クリティカルに実行される）

	制限事項

		IP.httdat, Recv.httdat を削除してはならない。（削除しても再作成するなら可）
		ウェイトしないこと。すぐ終わること。※1
		プロセスの終了と同時か後に呼び出し側のコマンドインタプリタに制御を返すこと。※2

		※1 サービスコマンド実行中は HTT.exe の処理が全てブロックされるため。
		※2 プロセス終了前に制御を返しちゃう場合は calc.exe -> START /WAIT calc.exe みたいに対処してね。

	定期的な空実行の判定

		IP.httdat が空であること。

	切断の要求

		Send.httdat を削除する。

	タイムアウトの判定

		各ファイルの「更新」日時は以下の日時に対応する。

			IP.httdat   ... 接続した日時
			Recv.httdat ... １バイト以上のデータを最後に受信した日時 ※3
			Send.httdat ... １バイト以上のデータを最後に送信した日時

		※3 最初の実行時の Recv.httdat はサービスを紐付けた日時と一致する。

	受信データサイズが際限なく巨大化し得ることへの注意

		サイズのチェックに穴があると、そこを突いて際限なくデータを送り続け、
		サーバーのディスクをパンクさせる攻撃が可能となる。
		サイズのチェックに穴があってはならない。

		Recv.httdat のサイズを確認し、ありえない程大きなサイズになっていたら、削除または切断する。
		または読み終わった部分を削除するか Recv.httdat のサイズをゼロにする。

	送信データサイズの際限なく巨大化し得ることへの注意

		受信データ程ではないが、送信が滞ることを想定せず延々とデータを書き込めば、
		同様にディスクをパンクさせてしまうかもしれない。

		Send.httdat のサイズを確認し、大きくなりすぎないように追記するデータ量を調整する。
		次の実行までに 1,000,000 バイトより多く送信されることはない。/* せいぜい 2 ～ 3,000,000 バイト程度にする */


制限

	最大同時接続数

		5000

	暫定最大同時接続数

		4750（最大同時接続数×0.95）

		タイトレベル

			L ... 4250（最大同時接続数×0.85）
			M ... 4500（最大同時接続数×0.9）
			H ... 4750（最大同時接続数×0.95）

		タイトな状況での振る舞い（参考）

			～ L                ... サービス名タイムアウト１分・同じＩＰから最大２０・下り無通信タイムアウト５分
			L ～ M              ... サービス名タイムアウト２秒・同じＩＰから最大１０・下り無通信タイムアウト１分３０秒
			M ～ H              ... ＨＴＴＰ以外はそのまま・ＨＴＭＬのみ５０３　　　・下り無通信タイムアウト１分
			H ～ 最大同時接続数 ... ＨＴＴＰ以外はそのまま・全て５０３　　　　　　　・下り無通信タイムアウト３０秒
			最大同時接続数 ～   ... 全てのリクエスト（全てのサービス）接続後、即切断・下り無通信タイムアウト３０秒

	同じＩＰアドレスからの接続数の上限

		20 (リソースが逼迫してきたら 10)

	リソースの使用状況による制限

		際限なく接続を許してしまうとメモリ・ディスクを食い尽くすことが懸念される。
		メモリ・ディスクの使用状況に応じて以下のとおり動作する。

		物理メモリの空き 1.0GB 以下 OR 物理メモリの空き 10% 以下 OR ディスクの空き 1.0GB 以下（ステータス：レッド）※4

			全ての接続を切断する。
			新しい接続を受け付けない。

		物理メモリの空き 1.5GB 以下 OR 物理メモリの空き 15% 以下 OR ディスクの空き 1.5GB 以下（ステータス：イエロー）※4

			接続がゼロになったら１つだけ接続を許可する。== 同時接続数０～１に絞る。

		それ以外（ステータス：グリーン）

			通常運転

	起動時のリソースの制限

		物理メモリの空き 2.0GB 以下 OR 物理メモリの空き 20% 以下 OR ディスクの空き 2.0GB 以下 ※4

	サービスコマンドに保障されるリソース

		※4 ディスクの空きは最小 100MB まで変更できる。（ＲＡＭドライブを使用するときなど）

		物理メモリ 100MB ディスクの空き 100MB がだいたい保障されるはず。
		他のプロセスによる影響はあるので、不必要にリソースを消費しないよう心掛ける。
		大量に使う前に空きを確認する。

